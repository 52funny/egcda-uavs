use std::ops::Sub;

use pbc_rust::Pairing;
use rand::Rng;

// const INIT_TEXT_FR256: &str = "type f
//     q 115792089237314936872688561244471742058375878355761205198700409522629664518163
//     r 115792089237314936872688561244471742058035595988840268584488757999429535617037
//     b 3
//     beta 76600213043964638334639432839350561620586998450651561245322304548751832163977
//     alpha0 82889197335545133675228720470117632986673257748779594473736828145653330099944
//     alpha1 66367173116409392252217737940259038242793962715127129791931788032832987594232
// ";
//
const TYPE_A: &str = "
type a
q 8780710799663312522437781984754049815806883199414208211028653399266475630880222957078625179422662221423155858769582317459277713367317481324925129998224791
h 12016012264891146079388821366740534204802954401251311822919615131047207289359704531102844802183906537786776
r 730750818665451621361119245571504901405976559617
exp2 159
exp1 107
sign1 1
sign0 1
";

const TYPE_A1: &str = "
type a1
p 48512875896303752499712277254589628516419352188294521198189567511009073158115045361294839347099315898960045398524682007334164928531594799149100548036445760110913157420655690361891290858441360807158247259460501343449199712532828063940008683740048500980441989713739689655610578458388126934242630557397618776539259
n 36203638728584889925158415861634051131656232976339194924022065306723188923966451762160327870969638730567198058600508960697138006366861790409776528385407283664860565239295291314844246909284597617282274074224254733917313218308080644731349763985110821627195514711746037056425804819692632040479575042834043863089
l 1340
";

fn main() {
    let mut p = Pairing::empty();
    p.init_from_str(TYPE_A1);
    let h = p.g1().from_hash("need sig str");
    let g = p.g2().random();
    let sk = p.gr().random();
    let mut puk = g.clone();
    puk.pow_zn(&sk);
    let mut sig = h.clone();
    sig.pow_zn(&sk);

    let t = std::time::Instant::now();
    let sig1 = p.pairing(&h, &puk);
    let t1 = std::time::Instant::now();
    let sig2 = p.pairing(&sig, &g);
    let t2 = std::time::Instant::now();

    println!("sig1 = {:?}", sig1);
    println!("sig2 = {:?}", sig2);

    println!("time elapsed: {:?}", t1.sub(t));
    println!("time elapsed: {:?}", t2.sub(t1));
    assert_eq!(sig1, sig2);
}
